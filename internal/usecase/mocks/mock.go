// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	domain "shop/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Auth mocks_repo base method.
func (m *MockUsecase) Auth(username, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", username, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockUsecaseMockRecorder) Auth(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockUsecase)(nil).Auth), username, password)
}

// CreatePurchase mocks_repo base method.
func (m *MockUsecase) CreatePurchase(arg0, arg1 string) (*domain.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchase", arg0, arg1)
	ret0, _ := ret[0].(*domain.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchase indicates an expected call of CreatePurchase.
func (mr *MockUsecaseMockRecorder) CreatePurchase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockUsecase)(nil).CreatePurchase), arg0, arg1)
}

// CreateTransaction mocks_repo base method.
func (m *MockUsecase) CreateTransaction(arg0, arg1 string, arg2 float64) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockUsecaseMockRecorder) CreateTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockUsecase)(nil).CreateTransaction), arg0, arg1, arg2)
}

// GetPurchasesForUserByUserGUID mocks_repo base method.
func (m *MockUsecase) GetPurchasesForUserByUsername(arg0 string) ([]domain.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasesForUserByUserGUID", arg0)
	ret0, _ := ret[0].([]domain.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchasesForUserByUserGUID indicates an expected call of GetPurchasesForUserByUserGUID.
func (mr *MockUsecaseMockRecorder) GetPurchasesForUserByUserGUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasesForUserByUserGUID", reflect.TypeOf((*MockUsecase)(nil).GetPurchasesForUserByUsername), arg0)
}

// GetTransactionsForUserByUserGUID mocks_repo base method.
func (m *MockUsecase) GetTransactionsForUserByUsername(arg0 string) ([]domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsForUserByUserGUID", arg0)
	ret0, _ := ret[0].([]domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsForUserByUserGUID indicates an expected call of GetTransactionsForUserByUserGUID.
func (mr *MockUsecaseMockRecorder) GetTransactionsForUserByUserGUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsForUserByUserGUID", reflect.TypeOf((*MockUsecase)(nil).GetTransactionsForUserByUsername), arg0)
}
